/** 
*         (C) Copyright 2008-2009 Samsung Electro-Mechanics CO., LTD. 
* 
* PROPRIETARY RIGHTS of Samsung Electro-Mechanics are involved in the subject  
* matter of this material.  All manufacturing, reproduction, use, and sales  
* rights pertaining to this subject matter are governed by the license agreement. 
* The recipient of this software implicitly accepts the terms of the license. 
* 
*/ 
 
/** 
* 
* @file			sem_flags.h 
* @brief		Contains a common build control flags 
* 
* @version	        0.00.003 
* @author	        Alexander Loktionov (alex.loktionov@samsung.com) 
* 
* @document 	        Common STB platform API v1.5 
* 
* Created 2009.02.07 
* 
*/ 
 
#ifndef _SEM_FLAGS_H_ 
#define _SEM_FLAGS_H_ 
 
#define SEMFL_ENDIAN_BIG        1 
#define SEMFL_ENDIAN_LITTLE     0 

#define SEMFL_NO_FLOAT		1
 
#define SEMFL_OS_NT             0 
#define SEMFL_OS_LINUX          1 
#define SEMFL_OS_STLITE         2 
#define SEMFL_OS_UCOS           3
#define SEMFL_OS_NUCLEUS        4
 
#define SEMFL_HOST_TARGET       0 
#define SEMFL_HOST_PC           1 
 
 
#define SEMFL_ENDIAN            SEMFL_ENDIAN_LITTLE 
#define SEMFL_OS                SEMFL_OS_NT
#define SEMFL_HOST              SEMFL_HOST_PC
 
#endif /* #ifndef _SEM_FLAGS_H_ */
/** 
*         (C) Copyright 2008-2009 Samsung Electro-Mechanics CO., LTD. 
* 
* PROPRIETARY RIGHTS of Samsung Electro-Mechanics are involved in the subject  
* matter of this material.  All manufacturing, reproduction, use, and sales  
* rights pertaining to this subject matter are governed by the license agreement. 
* The recipient of this software implicitly accepts the terms of the license. 
* 
*/ 
 
/** 
* 
* @file			sem_types.h 
* @brief		Contains a number of generic type declarations for the SEMCO common STB platform API. 
* 
* @version	        1.00.002 
* @author	        Alexander Loktionov (alex.loktionov@samsung.com) 
* 
* @note            You must check your STB OS (compiler) types! sem_types.h and your STB OS types must be same size! 
* @note            This file was tested to be compatible with these STB OS-es: 
* @note            2009.01 STLite/OS20 
* 
* Created 2009.02.07 
* 
*/ 
 
#ifndef _SEM_TYPES_H_ 
#define _SEM_TYPES_H_ 
 
 
 
#ifndef FALSE 
#define FALSE               0 
#endif 
#ifndef TRUE 
#define TRUE                1 
#endif 
#ifndef NULL 
#define NULL                0 
#endif 
 
 
/** 
 * unsigned types  
 */ 
typedef unsigned char       U8; 
typedef unsigned short      U16; 
typedef unsigned int        U32; 
 
/** 
 * signed types  
 */ 
typedef signed char         S8; 
typedef signed short        S16; 
typedef signed int          S32; 
 
typedef unsigned char       UCHAR; 
typedef char                CHAR; 
 
#ifndef SEM_NO_BOOL_TYPE_DEFINE 
typedef unsigned int        BOOL; 
#endif 
 
/** 
 * floating point types 
 */ 
typedef float               F32; 
typedef double              F64; 
 
 
/** 
 * some helper macros 
 */ 
#ifndef MK_U32 
#define MK_U32(hi,lo)       ((U32)(((hi)<<16)|(lo))) 
#define MK_4CC(a,b,c,d)	    ((U32)((a<<24)|(b<<16)|(c<<8)|(d)))
#define U32_HI(x)           (((U32)x)>>16) 
#define U32_LO(x)           ((U32)(x)&0xFFFF) 
#endif /* #ifndef MK_U32 */ 
 
#define SETFL(x,f)          ((x)|=(f)) 
#define RESETFL(x,f)        ((x)&=~(f)) 
 
#define SEMID_ENCA(a,b,c)   (0x8000|((a&0x1F))|((b&0x1F)<<5)|((c&0x1F)<<10)) 
#define SEMID_ENCI(n,i)     (i|((n<<1))) 
#define SEMID_ENID(a,b,c,n) MK_U32(SEMID_ENCA(a,b,c),SEMID_ENCI(n,0)) 
 
/* 
 * OS types 
 */ 
 
typedef U32                 HI2C_T;             /* OS I2C handle */ 
typedef U32                 HSM_T;              /* OS semaphore handle */ 
typedef U32                 TICK_T;             /* OS ticks */ 
 
 
 
 
#endif /*#ifndef _SEM_TYPES_H_ */
/** 
*         (C) Copyright 2008-2009 Samsung Electro-Mechanics CO., LTD. 
* 
* PROPRIETARY RIGHTS of Samsung Electro-Mechanics are involved in the subject  
* matter of this material.  All manufacturing, reproduction, use, and sales  
* rights pertaining to this subject matter are governed by the license agreement. 
* The recipient of this software implicitly accepts the terms of the license. 
* 
*/ 
 
/** 
* 
* @file			sem_err.h 
* @brief		Defines errors constant for the SEMCO common STB platform API  
* @brief		but you can use simple check  
* @brief                (res)<0 - ERR 
* @brief	        (res==0)- OK 
* @brief             	(res==1)- FALSE or PENDING 
* 
* @note                 SEM_Exxx - Error codes, SEM_Sxxx - status codes 
* 
* @version	        1.00.003
* @author	        Alexander Loktionov (alex.loktionov@samsung.com) 
* 
* @document 	Common STB platform API v1.5 
* 
* Created 2009.02.04 
* 
*/ 
 
 
#ifndef _SEM_ERR_H_ 
#define _SEM_ERR_H_ 
 
/** 
 * @note  DO NOT EDIT THIS FILE   
 * 
 * If you wish to rename any of the "user defined" bits, 
 * it should be done in the user file that includes this 
 * source file  
 * 
 */ 
 
/* 
 *  3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1  
 *  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 
 *  E <User  Codes>       A D H B O <-Error Codes-> <-Status bits-> 
 * 
 *  31     E         - Error Flag. If set (<0), check ERROR codes for reason. 
 *  30..24 UserCodes - User-declared flags, errors or status. 
 * 
 *  20     APAL      - Application Abstraction Layer error level 
 *  19     DL        - Developer Library error level 
 *  18     HAL       - Hardware Abstraction Layer error level 
 *  17     BSL       - Board Support Library error level 
 *  16     OS,H/W    - OS level   
 */ 
 
#define	SEM_SOK  	    0                   /* OK */ 
#define	SEM_SFALSE	    1                   /* No errors, but function returned negative result */ 
#define	SEM_SPENDING	    1                   /* Function needs once more to be called.*/
                                                /*  Look the function's documentation for more details */ 
 
#define SEM_ERROR           ((S32)0x80000000) 
#define	SEM_EFAIL	    ((S32)0x80000000)   /* Function failed by unknown reason */ 
 
#define	SEM_EBAD_UNIT_NUMBER ((S32)0x80000100)  /* NIM number is out of range */ 
#define	SEM_ENOT_INITIALIZED ((S32)0x80000200)  /* xxxx_init() function wasn't called for this front-end unit */ 
#define	SEM_EBAD_PARAMETER   ((S32)0x80000400)  /* One of function's input parameter has invalid value */ 
#define	SEM_ENOT_SUPPORTED   ((S32)0x80000800)  /* Some feature asked by caller is not supported */ 
                                                /* Look the function's documentation for more details */ 
 
#define	SEM_EIIC_ERR        ((S32)0x80001000)   /* While interacting with NIM module some I2C bus error happened.*/  
                                                /*  ( SDA/SCL problem, etc...) */ 
#define	SEM_EI2C_ERR        SEM_EIIC_ERR   	/* IIC==I2C */ 
 
#define	SEM_EIIC_NOACK      ((S32)0x80002000)   /* While interacting with NIM module no ACK bit) */ 
 
#define	SEM_ETIMEOUT        ((S32)0x80004000)   /* Some timeout limit. Look the function's documentation for more details.*/ 
 
#define	SEM_ESMALL          ((S32)0x80008000)   /* This function needs more bigger struct (newer struct) */ 
 

#endif /*#ifndef _SEM_ERR_H_ */
/** 
*         (C) Copyright 2008-2009 Samsung Electro-Mechanics CO., LTD. 
* 
* PROPRIETARY RIGHTS of Samsung Electro-Mechanics are involved in the subject  
* matter of this material.  All manufacturing, reproduction, use, and sales  
* rights pertaining to this subject matter are governed by the license agreement. 
* The recipient of this software implicitly accepts the terms of the license. 
* 
*/ 
 
/** 
* 
* @file			sem_debug.h 
* @brief		Defines basic debuging trace macros and constants 
* 
* @version	        0.00.004
* @author	        Alexander Loktionov (alex.loktionov@samsung.com) 
* 
* @note                 you can remove debug tracing code for all files in project 
* @note			by using compiler command line parameters to set SEM_DBG==0 
* @note			you can include/remove debug tracing code for a specific module 
* @note 		by changing define to #define SEM_DBG 0 in debug.h file 
* @note 		in /SRC/ directory of the specific module 
* @note 		also you can enable disable tracing in your STB S/W  
* @note	          	See OSAL in Common STB platform API documentation  
* @note 		and /SEMOSALXXXX for your STB OS 
* 
* @document 	        Common STB platform API v1.5 
* 
* Created 2009.02.04 
* 
*/ 
 
 
#ifndef _DEBUG_H_ 
#define _DEBUG_H_ 
 
#define SEMDBG_LVL_NOTHING  -1 
#define SEMDBG_LVL_ASSERT   0x0 
#define SEMDBG_LVL_HW       0x1                 /* hardware error */ 
#define SEMDBG_LVL_LOG      0x2 
#define SEMDBG_LVL_VERIFY   0x3 
#define SEMDBG_LVL_CHECK    0x4 
#define SEMDBG_LVL_EXIT     0x9 
#define SEMDBG_LVL_ENTER    0xA 
#define SEMDBG_LVL_TRACEHI  0xB 
#define SEMDBG_LVL_TRACEMID 0xC  
#define SEMDBG_LVL_TRACE    0xD
#define SEMDBG_LVL_VERBOSE  0xE
#define SEMDBG_LVL_DEBUG    0xF
 
 
#ifndef SEM_DBG 
/*  
 * you can remove all debug messages only by setting SEM_DBG to SEMDBG_LVL_NOTHING  
 */ 
#define SEM_DBG	            SEMDBG_LVL_DEBUG
//#define SEM_DBG           SEMDBG_LVL_NOTHING 
 
#endif  
 
/*  
 * you can disable all debug support of some layers  
 * if you comment some of the lines below  
 */ 
#ifdef SEM_DBG            
#if SEM_DBG!=SEMDBG_LVL_NOTHING 
#define SEMDBG_BSL                              /* board support layer (driver) */ 
#define SEMDBG_HAL                              /* hardware abstaction layer */ 
#define SEMDBG_APP                              /* application (SEMCO test applications) */ 
#define SEMDBG_APAL                             /* application abstaction layer */ 
#define SEMDBG_OSAL                             /* STB OS abstaction layer */ 
#define SEMDBG_DL                               /* SEMCO common libraries (strings,math etc) */ 
#endif 
#else 
#define SEM_DBG           SEMDBG_LVL_NOTHING 
#endif 
 
 
 
 
#ifdef SEMDBG_BSL  
#define SEMDBG_TRACE_BSL(lvl,param)	semosal_trace((U32)((lvl<<28)|(THIS_FILE_ID<<16)|__LINE__),param) 
#else 
#define SEMDBG_TRACE_BSL(lvl,param) 
#endif 
 
#ifdef SEMDBG_HAL 
#define SEMDBG_TRACE_HAL(lvl,param)	semosal_trace((U32)((lvl<<28)|(THIS_FILE_ID<<16)|__LINE__),param) 
#else 
#define SEMDBG_TRACE_HAL(lvl,param) 
#endif 
 
#ifdef SEMDBG_APP 
#define SEMDBG_TRACE_APP(lvl,param)	semosal_trace((U32)((lvl<<28)|(THIS_FILE_ID<<16)|__LINE__),param) 
#else 
#define SEMDBG_TRACE_APP(lvl,param) 
#endif 
 
#ifdef SEMDBG_APAL 
#define SEMDBG_TRACE_APAL(lvl,param)	semosal_trace((U32)((lvl<<28)|(THIS_FILE_ID<<16)|__LINE__),param) 
#else 
#define SEMDBG_TRACE_APAL(lvl,param) 
#endif 
 
#ifdef SEMDBG_OSAL 
#define SEMDBG_TRACE_OSAL(lvl,param)	semosal_trace((U32)((lvl<<28)|(THIS_FILE_ID<<16)|__LINE__),param) 
#else 
#define SEMDBG_TRACE_OSAL(lvl,param) 
#endif 
 
#ifdef SEMDBG_DL 
#define SEMDBG_TRACE_DL(lvl,param)	semosal_trace((U32)((lvl<<28)|(THIS_FILE_ID<<16)|__LINE__),param) 
#else 
#define SEMDBG_TRACE_DL(lvl,param) 
#endif 
 
 
#if SEMFL_HOST==SEMFL_HOST_PC 
#define DebugBreak()    _asm { int 3 } 
#else 
#define DebugBreak()     
#endif 
 
#define SEMDBG_LOG(param)	        THISFILE_TRACE(SEMDBG_LVL_LOG,param)  
 
#if SEM_DBG>=SEMDBG_LVL_ENTER 
#define SEMDBG_ENTER(id)                THISFILE_TRACE(SEMDBG_LVL_ENTER,id)  
#define SEMDBG_EXIT(id)	                THISFILE_TRACE(SEMDBG_LVL_EXIT,id)  
#else 
#if SEM_DBG>=SEMDBG_LVL_EXIT 
#define SEMDBG_ENTER(id)                 
#define SEMDBG_EXIT(id)	                { if(SEM_FAILED(res)) THISFILE_TRACE(SEMDBG_LVL_CHECK,res); } 
#else 
#define SEMDBG_EXIT(id)	                 
#define SEMDBG_ENTER(id)                 
#endif /* #if SEM_DBG>=SEMDBG_LVL_ENTER */ 
#endif /* #if SEM_DBG>SEMDBG_LVL_EXIT   */ 
 
#define SEMDBG_LOG(param)	        THISFILE_TRACE(SEMDBG_LVL_LOG,param)   
#define SEMDBG_TRACEHI(param)	        THISFILE_TRACE(SEMDBG_LVL_TRACEHI,param)  
#define SEMDBG_TRACEMID(param)	        THISFILE_TRACE(SEMDBG_LVL_TRACEMID,param)  
#define SEMDBG_TRACE(param)	        THISFILE_TRACE(SEMDBG_LVL_TRACE,param) 
#define SEMDBG_VERBOSE(param)	        THISFILE_TRACE(SEMDBG_LVL_VERBOSE,param)  
#define SEMDBG_DEBUG(param)	        THISFILE_TRACE(SEMDBG_LVL_DEBUG,param)  

#define SEMDBG_LOGID(a,b,c,n)	        THISFILE_TRACE(SEMDBG_LVL_LOG,SEMID_ENID(a,b,c,n)) 
 
#define SEMDBG_CHECK(res)              if(res<0) { THISFILE_TRACE(SEMDBG_LVL_CHECK,res); goto err_exit;} 
 
#if SEM_DBG!=SEMDBG_LVL_NOTHING 
#define SEMDBG_ASSERT(x)                if (!(x)) { THISFILE_TRACE(SEMDBG_LVL_ASSERT,0); DebugBreak();} 
#define SEMDBG_VERIFY(x)                ((x)?1:THISFILE_TRACE(SEMDBG_LVL_VERIFY,0)) 
#else 
#define SEMDBG_ASSERT(x)                 
#define SEMDBG_VERIFY(x)                (x) 
#endif /*#if SEM_DBG==1 */
 
 
#if SEM_DBG<SEMDBG_LVL_TRACE 
#define SEM_FAILED(x)       (x<0)  
#define SEM_SUCCEEDED(x)    (x>=0)  
#define SEM_NO_ERR(x)       SEM_SUCCEEDED(x)  
#else 
#define SEM_FAILED(x)       ((x<0)?!SEMDBG_TRACE(x):SEMDBG_TRACE(x))  
#define SEM_SUCCEEDED(x)    ((x>=0)?!SEMDBG_TRACE(x):SEMDBG_TRACE(x))   
#define SEM_NO_ERR(x)       SEM_SUCCEEDED(x)  
#endif 

#endif /*#ifndef _DEBUG_H_ */
