#ifndef _C8FVP3_HQVDPLITE_API_IQI_H
#define _C8FVP3_HQVDPLITE_API_IQI_H

/****************************************************************************************
*                     Copyright STMicroelectronics
*              All rights reserved, COMPANY CONFIDENTIAL
*     Unauthorized reproduction and communication strictly prohibited
*----------------------------------------------------------------------------------------
*                   System Platforms Group - IP&Design/SPG
*----------------------------------------------------------------------------------------
*  This C header file was automatically generated by 'spirit2regtest' utility from the
*  SPIRIT description of the component.
*
*  Purpose : It declares C preprocessor definitions for component, register and 
*            register fields parameters
*
*  Generated by spirit2regtest v1.7.10
*
*  PLEASE DO NOT MODIFY THIS FILE
****************************************************************************************/


/*
* Address Block : IQI
*/


/**
* Register : CONFIG
* Global configuration
*/

#define IQI_CONFIG_OFFSET                               (c8fvp3_hqvdplite_api_IQI_BASE_ADDR + 0x00)
#define IQI_CONFIG_MASK                                 (0x00130077)

/**
* Bit-field : MAIN_BYPASS
* If set the IQI is bypassed.
* if reset the IQI is not bypassed.
*/

#define IQI_CONFIG_MAIN_BYPASS_SHIFT                    (0x00000000)
#define IQI_CONFIG_MAIN_BYPASS_WIDTH                    (1)
#define IQI_CONFIG_MAIN_BYPASS_MASK                     (0x00000001)

/**
* Bit-field : SINC_ENABLE
* If set the sinx/x compensation is enabled.
* If reset the sinx/x compensation is disabled.
*/

#define IQI_CONFIG_SINC_ENABLE_SHIFT                    (0x00000001)
#define IQI_CONFIG_SINC_ENABLE_WIDTH                    (1)
#define IQI_CONFIG_SINC_ENABLE_MASK                     (0x00000002)

/**
* Bit-field : PK_ENABLE
* if set the peaking (IQI sub-function) is enabled.
* if reset the peaking (IQI sub-function) is disabled.
*/

#define IQI_CONFIG_PK_ENABLE_SHIFT                      (0x00000002)
#define IQI_CONFIG_PK_ENABLE_WIDTH                      (1)
#define IQI_CONFIG_PK_ENABLE_MASK                       (0x00000004)

/**
* Bit-field : CTI_ENABLE
* if set the CTI (IQI sub-function) is enabled.
* if reset the CTI (IQI sub-function) is disabled.
*/

#define IQI_CONFIG_CTI_ENABLE_SHIFT                     (0x00000004)
#define IQI_CONFIG_CTI_ENABLE_WIDTH                     (1)
#define IQI_CONFIG_CTI_ENABLE_MASK                      (0x00000010)

/**
* Bit-field : LE_ENABLE
* if set the LE(IQI sub-function) is enabled.
* if reset the LE (IQI sub-function) is disabled.
*/

#define IQI_CONFIG_LE_ENABLE_SHIFT                      (0x00000005)
#define IQI_CONFIG_LE_ENABLE_WIDTH                      (1)
#define IQI_CONFIG_LE_ENABLE_MASK                       (0x00000020)

/**
* Bit-field : CSC_ENABLE
* if set the CSC (IQI sub-function) is enabled.
* if reset the CSC (IQI sub-function) is disabled.
*/

#define IQI_CONFIG_CSC_ENABLE_SHIFT                     (0x00000006)
#define IQI_CONFIG_CSC_ENABLE_WIDTH                     (1)
#define IQI_CONFIG_CSC_ENABLE_MASK                      (0x00000040)

/**
* Bit-field : LE_DEMO
* if set the LE demo is enabled.
* if reset the LE demo is disabled.
*/

#define IQI_CONFIG_LE_DEMO_SHIFT                        (0x00000010)
#define IQI_CONFIG_LE_DEMO_WIDTH                        (1)
#define IQI_CONFIG_LE_DEMO_MASK                         (0x00010000)

/**
* Bit-field : PEAKING_DEMO
* if set the Peaking demo is enabled.
* if reset the Peaking demo is disabled.
*/

#define IQI_CONFIG_PEAKING_DEMO_SHIFT                   (0x00000011)
#define IQI_CONFIG_PEAKING_DEMO_WIDTH                   (1)
#define IQI_CONFIG_PEAKING_DEMO_MASK                    (0x00020000)

/**
* Bit-field : CTI_DEMO
* if set the CTI demo is enabled.
* if reset the CTI demo is disabled.
*/

#define IQI_CONFIG_CTI_DEMO_SHIFT                       (0x00000014)
#define IQI_CONFIG_CTI_DEMO_WIDTH                       (1)
#define IQI_CONFIG_CTI_DEMO_MASK                        (0x00100000)

/**
* Register : DEMO_WIND_SIZE
* Demo window size
*/

#define IQI_DEMO_WIND_SIZE_OFFSET                       (c8fvp3_hqvdplite_api_IQI_BASE_ADDR + 0x04)
#define IQI_DEMO_WIND_SIZE_MASK                         (0x07FF07FF)

/**
* Bit-field : START_PIXEL
* First active pixel in the demo window (The pixel at the left will be bypassed, no IQI on this pixel)
*/

#define IQI_DEMO_WIND_SIZE_START_PIXEL_SHIFT            (0x00000000)
#define IQI_DEMO_WIND_SIZE_START_PIXEL_WIDTH            (11)
#define IQI_DEMO_WIND_SIZE_START_PIXEL_MASK             (0x000007FF)

/**
* Bit-field : END_PIXEL
* Last active pixel in the demo window (The pixel at the right will be bypassed, no IQI on this pixel)
*/

#define IQI_DEMO_WIND_SIZE_END_PIXEL_SHIFT              (0x00000010)
#define IQI_DEMO_WIND_SIZE_END_PIXEL_WIDTH              (11)
#define IQI_DEMO_WIND_SIZE_END_PIXEL_MASK               (0x07FF0000)

/**
* Register : PK_CONFIG
* Peaking configuration
*/

#define IQI_PK_CONFIG_OFFSET                            (c8fvp3_hqvdplite_api_IQI_BASE_ADDR + 0x08)
#define IQI_PK_CONFIG_MASK                              (0x0000FF1F)

/**
* Bit-field : EXTENDED_SIZE
* 0: normal mode
* extended mode should be used only for sources that have been zoomed by a factor greater than 2.
*/

#define IQI_PK_CONFIG_EXTENDED_SIZE_SHIFT               (0x00000000)
#define IQI_PK_CONFIG_EXTENDED_SIZE_WIDTH               (1)
#define IQI_PK_CONFIG_EXTENDED_SIZE_MASK                (0x00000001)

/**
* Bit-field : ENV_DETECT
* if reset the envelope detection is done on 3 lines.
* if set the envelope detection is only done on 1 line.
*/

#define IQI_PK_CONFIG_ENV_DETECT_SHIFT                  (0x00000001)
#define IQI_PK_CONFIG_ENV_DETECT_WIDTH                  (1)
#define IQI_PK_CONFIG_ENV_DETECT_MASK                   (0x00000002)

/**
* Bit-field : CORING_MODE
* If set the Peaking is working in Chroma adaptive coring mode.
* If reset the Peaking is working in manual coring mode. (user defined)
*/

#define IQI_PK_CONFIG_CORING_MODE_SHIFT                 (0x00000002)
#define IQI_PK_CONFIG_CORING_MODE_WIDTH                 (1)
#define IQI_PK_CONFIG_CORING_MODE_MASK                  (0x00000004)

/**
* Bit-field : V_PK_EN
* if set the Vertical peaking is enabled.
* if reset the Vertical peaking is disabled.
*/

#define IQI_PK_CONFIG_V_PK_EN_SHIFT                     (0x00000003)
#define IQI_PK_CONFIG_V_PK_EN_WIDTH                     (1)
#define IQI_PK_CONFIG_V_PK_EN_MASK                      (0x00000008)

/**
* Bit-field : RANGE_GAIN_LUT_INIT
* if set, a new Look Up Table of gain coefficients is loaded after the Vsync.
* if reset, we keep the previous Look Up Table. (no load).
* This bit is sent to the T2 interface and IQI blocks.
*/

#define IQI_PK_CONFIG_RANGE_GAIN_LUT_INIT_SHIFT         (0x00000004)
#define IQI_PK_CONFIG_RANGE_GAIN_LUT_INIT_WIDTH         (1)
#define IQI_PK_CONFIG_RANGE_GAIN_LUT_INIT_MASK          (0x00000010)

/**
* Bit-field : OVERSHOOT
* Overshoot Factor
*/

#define IQI_PK_CONFIG_OVERSHOOT_SHIFT                   (0x00000008)
#define IQI_PK_CONFIG_OVERSHOOT_WIDTH                   (2)
#define IQI_PK_CONFIG_OVERSHOOT_MASK                    (0x00000300)

/**
* Bit-field : UNDERSHOOT
* undershoot factor
*/

#define IQI_PK_CONFIG_UNDERSHOOT_SHIFT                  (0x0000000a)
#define IQI_PK_CONFIG_UNDERSHOOT_WIDTH                  (2)
#define IQI_PK_CONFIG_UNDERSHOOT_MASK                   (0x00000C00)

/**
* Bit-field : RANGE_MAX
* Value (x16) for range max. (from 0 to 15).
*/

#define IQI_PK_CONFIG_RANGE_MAX_SHIFT                   (0x0000000c)
#define IQI_PK_CONFIG_RANGE_MAX_WIDTH                   (4)
#define IQI_PK_CONFIG_RANGE_MAX_MASK                    (0x0000F000)

/**
* Register : COEFF0_COEFF1
* Peaking horizontal filter center coefficients 0 and 1
*/

#define IQI_COEFF0_COEFF1_OFFSET                        (c8fvp3_hqvdplite_api_IQI_BASE_ADDR + 0x0C)
#define IQI_COEFF0_COEFF1_MASK                          (0x03FF03FF)

/**
* Bit-field : PK_COEFF0
* Coef0: horizontal filter center coefficient 0 in <10,t,9,0> format ranging from -512 to 511.
*/

#define IQI_COEFF0_COEFF1_PK_COEFF0_SHIFT               (0x00000000)
#define IQI_COEFF0_COEFF1_PK_COEFF0_WIDTH               (10)
#define IQI_COEFF0_COEFF1_PK_COEFF0_MASK                (0x000003FF)

/**
* Bit-field : PK_COEFF1
* Coef1: horizontal filter center coefficient 1 in <10,t,9,0> format ranging from -512 to 511.
*/

#define IQI_COEFF0_COEFF1_PK_COEFF1_SHIFT               (0x00000010)
#define IQI_COEFF0_COEFF1_PK_COEFF1_WIDTH               (10)
#define IQI_COEFF0_COEFF1_PK_COEFF1_MASK                (0x03FF0000)

/**
* Register : COEFF2_COEFF3
* Peaking horizontal filter center coefficients 2 and 3
*/

#define IQI_COEFF2_COEFF3_OFFSET                        (c8fvp3_hqvdplite_api_IQI_BASE_ADDR + 0x10)
#define IQI_COEFF2_COEFF3_MASK                          (0x03FF03FF)

/**
* Bit-field : PK_COEFF2
* Coef2: horizontal filter center coefficient 0 in <10,t,9,0> format ranging from -512 to 511.
*/

#define IQI_COEFF2_COEFF3_PK_COEFF2_SHIFT               (0x00000000)
#define IQI_COEFF2_COEFF3_PK_COEFF2_WIDTH               (10)
#define IQI_COEFF2_COEFF3_PK_COEFF2_MASK                (0x000003FF)

/**
* Bit-field : PK_COEFF3
* Coef3: horizontal filter center coefficient 1 in <10,t,9,0> format ranging from -512 to 511.
*/

#define IQI_COEFF2_COEFF3_PK_COEFF3_SHIFT               (0x00000010)
#define IQI_COEFF2_COEFF3_PK_COEFF3_WIDTH               (10)
#define IQI_COEFF2_COEFF3_PK_COEFF3_MASK                (0x03FF0000)

/**
* Register : COEFF4
* Peaking horizontal filter center coefficient 4
*/

#define IQI_COEFF4_OFFSET                               (c8fvp3_hqvdplite_api_IQI_BASE_ADDR + 0x14)
#define IQI_COEFF4_MASK                                 (0x000003FF)

/**
* Bit-field : PK_COEFF4
* Coef4: horizontal filter center coefficient 0 in <10,t,9,0> format ranging from -512 to 511.
*/

#define IQI_COEFF4_PK_COEFF4_SHIFT                      (0x00000000)
#define IQI_COEFF4_PK_COEFF4_WIDTH                      (10)
#define IQI_COEFF4_PK_COEFF4_MASK                       (0x000003FF)

/**
* Register : PK_LUT
* Peaking range gain LUT control
*/

#define IQI_PK_LUT_OFFSET                               (c8fvp3_hqvdplite_api_IQI_BASE_ADDR + 0x18)
#define IQI_PK_LUT_MASK                                 (0x00000003)

/**
* Bit-field : SELECT
* Defines which LUT to use:
*/

#define IQI_PK_LUT_SELECT_SHIFT                         (0x00000000)
#define IQI_PK_LUT_SELECT_WIDTH                         (2)
#define IQI_PK_LUT_SELECT_MASK                          (0x00000003)

/**
* Register : PK_GAIN
* Peaking gain
*/

#define IQI_PK_GAIN_OFFSET                              (c8fvp3_hqvdplite_api_IQI_BASE_ADDR + 0x1C)
#define IQI_PK_GAIN_MASK                                (0x0000FF1F)

/**
* Bit-field : PK_HOR_GAIN
*/

#define IQI_PK_GAIN_PK_HOR_GAIN_SHIFT                   (0x00000000)
#define IQI_PK_GAIN_PK_HOR_GAIN_WIDTH                   (5)
#define IQI_PK_GAIN_PK_HOR_GAIN_MASK                    (0x0000001F)

/**
* Bit-field : PK_VERT_GAIN
* vertical gain ranging from 0 to 15:
* 0 -> -2.5db (de-peaking)
* 4 -> 0 db
* 15 -> 7.5db (peaking)
*/

#define IQI_PK_GAIN_PK_VERT_GAIN_SHIFT                  (0x00000008)
#define IQI_PK_GAIN_PK_VERT_GAIN_WIDTH                  (4)
#define IQI_PK_GAIN_PK_VERT_GAIN_MASK                   (0x00000F00)

/**
* Bit-field : SINC_GAIN
* sinx/x compensation gain ranging from 0 to 15
*/

#define IQI_PK_GAIN_SINC_GAIN_SHIFT                     (0x0000000c)
#define IQI_PK_GAIN_SINC_GAIN_WIDTH                     (4)
#define IQI_PK_GAIN_SINC_GAIN_MASK                      (0x0000F000)

/**
* Register : PK_CORING_LEVEL
* Peaking coring level
*/

#define IQI_PK_CORING_LEVEL_OFFSET                      (c8fvp3_hqvdplite_api_IQI_BASE_ADDR + 0x20)
#define IQI_PK_CORING_LEVEL_MASK                        (0x0000003F)

/**
* Bit-field : PK_CORING_LEVEL
* Coring level defined by the user, ranging from 0 (no coring) to 63 (maximum coring).
* used in both user defined and chroma edge detection coring modes
*/

#define IQI_PK_CORING_LEVEL_PK_CORING_LEVEL_SHIFT       (0x00000000)
#define IQI_PK_CORING_LEVEL_PK_CORING_LEVEL_WIDTH       (6)
#define IQI_PK_CORING_LEVEL_PK_CORING_LEVEL_MASK        (0x0000003F)

/**
* Register : CTI_CONFIG
* Chroma transient improvement configuration
*/

#define IQI_CTI_CONFIG_OFFSET                           (c8fvp3_hqvdplite_api_IQI_BASE_ADDR + 0x24)
#define IQI_CTI_CONFIG_MASK                             (0x000F7FFF)

/**
* Bit-field : CTI_T_MON
* Value of both the CTI threshold used in monotonicity checker. (default value is 4)
*/

#define IQI_CTI_CONFIG_CTI_T_MON_SHIFT                  (0x00000000)
#define IQI_CTI_CONFIG_CTI_T_MON_WIDTH                  (4)
#define IQI_CTI_CONFIG_CTI_T_MON_MASK                   (0x0000000F)

/**
* Bit-field : CTI_T_MED
* Value of both the CTI threshold used in 3 points median filter (default value is 12)
*/

#define IQI_CTI_CONFIG_CTI_T_MED_SHIFT                  (0x00000004)
#define IQI_CTI_CONFIG_CTI_T_MED_WIDTH                  (6)
#define IQI_CTI_CONFIG_CTI_T_MED_MASK                   (0x000003F0)

/**
* Bit-field : CTI_STRENGTH1
* Value of the first CTI strength ranging from 0 (no CTI) to 3 (maximum CTI) (default value is 0).
*/

#define IQI_CTI_CONFIG_CTI_STRENGTH1_SHIFT              (0x0000000a)
#define IQI_CTI_CONFIG_CTI_STRENGTH1_WIDTH              (2)
#define IQI_CTI_CONFIG_CTI_STRENGTH1_MASK               (0x00000C00)

/**
* Bit-field : CTI_STRENGTH2
* Value of the second CTI strength ranging from 0 (no CTI) to 3 (maximum CTI) (default value is 0).
*/

#define IQI_CTI_CONFIG_CTI_STRENGTH2_SHIFT              (0x0000000c)
#define IQI_CTI_CONFIG_CTI_STRENGTH2_WIDTH              (2)
#define IQI_CTI_CONFIG_CTI_STRENGTH2_MASK               (0x00003000)

/**
* Bit-field : EXTENDED_CTI
* extended mode should be used only for sources that have been zoomed in.
*/

#define IQI_CTI_CONFIG_EXTENDED_CTI_SHIFT               (0x0000000e)
#define IQI_CTI_CONFIG_EXTENDED_CTI_WIDTH               (1)
#define IQI_CTI_CONFIG_EXTENDED_CTI_MASK                (0x00004000)

/**
* Bit-field : CTI_COR
* Value of both the CTI coring used in the peaking filter (default value is 6).
*/

#define IQI_CTI_CONFIG_CTI_COR_SHIFT                    (0x00000010)
#define IQI_CTI_CONFIG_CTI_COR_WIDTH                    (4)
#define IQI_CTI_CONFIG_CTI_COR_MASK                     (0x000F0000)

/**
* Register : LE_CONFIG
* Luma enhancer configuration
*/

#define IQI_LE_CONFIG_OFFSET                            (c8fvp3_hqvdplite_api_IQI_BASE_ADDR + 0x28)
#define IQI_LE_CONFIG_MASK                              (0x0000007F)

/**
* Bit-field : LCE_LUT_INIT
* if reset. The LUT is not loaded after Vsync
* if set: The LUT is loaded after Vsync.
*/

#define IQI_LE_CONFIG_LCE_LUT_INIT_SHIFT                (0x00000000)
#define IQI_LE_CONFIG_LCE_LUT_INIT_WIDTH                (1)
#define IQI_LE_CONFIG_LCE_LUT_INIT_MASK                 (0x00000001)

/**
* Bit-field : D1_601_NOT_709
* if reset, CCIR 709 color space
* if set, CCIR 601 color space
* This bit is share with the Chroma Enhancer function
*/

#define IQI_LE_CONFIG_D1_601_NOT_709_SHIFT              (0x00000001)
#define IQI_LE_CONFIG_D1_601_NOT_709_WIDTH              (1)
#define IQI_LE_CONFIG_D1_601_NOT_709_MASK               (0x00000002)

/**
* Bit-field : WEIGHT_GAIN
* Weight gain used by the CSC function, ranging from 0 to 31
*/

#define IQI_LE_CONFIG_WEIGHT_GAIN_SHIFT                 (0x00000002)
#define IQI_LE_CONFIG_WEIGHT_GAIN_WIDTH                 (5)
#define IQI_LE_CONFIG_WEIGHT_GAIN_MASK                  (0x0000007C)

/**
* Register : LE_LUT
* Luma enhancer LUT x (x=0:63)
*/

#define IQI_LE_LUT_OFFSET                               (c8fvp3_hqvdplite_api_IQI_BASE_ADDR + 0x2C)
#define IQI_LE_LUT_MASK                                 (0x03FF03FF)

/**
* Bit-field : LUT_COEF_EVEN
* This look up table contain the coefficients of the luma enhancer.
*/

#define IQI_LE_LUT_LUT_COEF_EVEN_SHIFT                  (0x00000000)
#define IQI_LE_LUT_LUT_COEF_EVEN_WIDTH                  (10)
#define IQI_LE_LUT_LUT_COEF_EVEN_MASK                   (0x000003FF)

/**
* Bit-field : LUT_COEF_ODD
* This look up table contain the coefficients of the luma enhancer.
*/

#define IQI_LE_LUT_LUT_COEF_ODD_SHIFT                   (0x00000010)
#define IQI_LE_LUT_LUT_COEF_ODD_WIDTH                   (10)
#define IQI_LE_LUT_LUT_COEF_ODD_MASK                    (0x03FF0000)

/**
* Register : CON_BRI
* Contrast&brightness gain and offset
*/

#define IQI_CON_BRI_OFFSET                              (c8fvp3_hqvdplite_api_IQI_BASE_ADDR + 0x12C)
#define IQI_CON_BRI_MASK                                (0x0FFF01FF)

/**
* Bit-field : CONTRAST_GAIN
* Contrast & Brightness gain value: attenuation x/256
* Range must SW limited to 0 to 256 for correct operation
*/

#define IQI_CON_BRI_CONTRAST_GAIN_SHIFT                 (0x00000000)
#define IQI_CON_BRI_CONTRAST_GAIN_WIDTH                 (9)
#define IQI_CON_BRI_CONTRAST_GAIN_MASK                  (0x000001FF)

/**
* Bit-field : CONBRI_OFFSET
* Contrast & Brightness offset value in 12,t,11,0 format (signed).
* From -2048 to +2047
*/

#define IQI_CON_BRI_CONBRI_OFFSET_SHIFT                 (0x00000010)
#define IQI_CON_BRI_CONBRI_OFFSET_WIDTH                 (12)
#define IQI_CON_BRI_CONBRI_OFFSET_MASK                  (0x0FFF0000)

/**
* Register : SAT_GAIN
* Saturation gain
*/

#define IQI_SAT_GAIN_OFFSET                             (c8fvp3_hqvdplite_api_IQI_BASE_ADDR + 0x130)
#define IQI_SAT_GAIN_MASK                               (0x000003FF)

/**
* Bit-field : SAT_GAIN
* Saturation gain value: attenuation x/256
*/

#define IQI_SAT_GAIN_SAT_GAIN_SHIFT                     (0x00000000)
#define IQI_SAT_GAIN_SAT_GAIN_WIDTH                     (10)
#define IQI_SAT_GAIN_SAT_GAIN_MASK                      (0x000003FF)

/**
* Register : PXF_CONF
* Progressive to interlaced pixel fifo configuration
*/

#define IQI_PXF_CONF_OFFSET                             (c8fvp3_hqvdplite_api_IQI_BASE_ADDR + 0x134)
#define IQI_PXF_CONF_MASK                               (0x00000003)

/**
* Bit-field : BYPASS_ENABLE
* If reset the p2i is working in Progressive to interlace mode: in this mode the video will be driven out in Interlace. (the input P2I video must be in progressive). The P2I has to remove video line depending of the field parity (fixed by the i_reg_field bit).
* If set P2I core is working in bypass: In this mode no pixels are removed. we have the same number of pixels at the input of the P2I as at the output.
*/

#define IQI_PXF_CONF_BYPASS_ENABLE_SHIFT                (0x00000000)
#define IQI_PXF_CONF_BYPASS_ENABLE_WIDTH                (1)
#define IQI_PXF_CONF_BYPASS_ENABLE_MASK                 (0x00000001)

/**
* Bit-field : FIELD
*/

#define IQI_PXF_CONF_FIELD_SHIFT                        (0x00000001)
#define IQI_PXF_CONF_FIELD_WIDTH                        (1)
#define IQI_PXF_CONF_FIELD_MASK                         (0x00000002)

/**
* Register : DEFAULT_COLOR
* Compositor default color
*/

#define IQI_DEFAULT_COLOR_OFFSET                        (c8fvp3_hqvdplite_api_IQI_BASE_ADDR + 0x138)
#define IQI_DEFAULT_COLOR_MASK                          (0x7FFFFFFF)

/**
* Bit-field : CHROMA_RED
* Cr[9:0]: Default Chroma red data sent to the compositor
*/

#define IQI_DEFAULT_COLOR_CHROMA_RED_SHIFT              (0x00000000)
#define IQI_DEFAULT_COLOR_CHROMA_RED_WIDTH              (10)
#define IQI_DEFAULT_COLOR_CHROMA_RED_MASK               (0x000003FF)

/**
* Bit-field : CHROMA_BLUE
* Cb[9:0]: Default Chroma blue data sent to the compositor
*/

#define IQI_DEFAULT_COLOR_CHROMA_BLUE_SHIFT             (0x0000000a)
#define IQI_DEFAULT_COLOR_CHROMA_BLUE_WIDTH             (10)
#define IQI_DEFAULT_COLOR_CHROMA_BLUE_MASK              (0x000FFC00)

/**
* Bit-field : LUMA_DATA
* Y[9:0]: Default Luma data sent to the compositor
*/

#define IQI_DEFAULT_COLOR_LUMA_DATA_SHIFT               (0x00000014)
#define IQI_DEFAULT_COLOR_LUMA_DATA_WIDTH               (10)
#define IQI_DEFAULT_COLOR_LUMA_DATA_MASK                (0x3FF00000)

/**
* Bit-field : DEFAULT_COLOR_CONTROL
* If set the default color is sent to the compositor.
*/

#define IQI_DEFAULT_COLOR_DEFAULT_COLOR_CONTROL_SHIFT   (0x0000001e)
#define IQI_DEFAULT_COLOR_DEFAULT_COLOR_CONTROL_WIDTH   (1)
#define IQI_DEFAULT_COLOR_DEFAULT_COLOR_CONTROL_MASK    (0x40000000)


#ifndef HQVDPLITE_API_FOR_STAPI
typedef struct {
    gvh_u32_t CONFIG;  /* at 0 */
    gvh_u32_t DEMO_WIND_SIZE;  /* at 4 */
    gvh_u32_t PK_CONFIG;  /* at 8 */
    gvh_u32_t COEFF0_COEFF1;  /* at 12 */
    gvh_u32_t COEFF2_COEFF3;  /* at 16 */
    gvh_u32_t COEFF4;  /* at 20 */
    gvh_u32_t PK_LUT;  /* at 24 */
    gvh_u32_t PK_GAIN;  /* at 28 */
    gvh_u32_t PK_CORING_LEVEL;  /* at 32 */
    gvh_u32_t CTI_CONFIG;  /* at 36 */
    gvh_u32_t LE_CONFIG;  /* at 40 */
    gvh_u32_t LE_LUT[64];  /* at 44 */
    gvh_u32_t CON_BRI;  /* at 300 */
    gvh_u32_t SAT_GAIN;  /* at 304 */
    gvh_u32_t PXF_CONF;  /* at 308 */
    gvh_u32_t DEFAULT_COLOR;  /* at 312 */
} s_IQI;

#else
typedef struct {
U32 Config;  /* at 0 */
U32 DemoWindSize;  /* at 4 */
U32 PkConfig;  /* at 8 */
U32 Coeff0Coeff1;  /* at 12 */
U32 Coeff2Coeff3;  /* at 16 */
U32 Coeff4;  /* at 20 */
U32 PkLut;  /* at 24 */
U32 PkGain;  /* at 28 */
U32 PkCoringLevel;  /* at 32 */
U32 CtiConfig;  /* at 36 */
U32 LeConfig;  /* at 40 */
U32 LeLut[64];  /* at 44 */
U32 ConBri;  /* at 300 */
U32 SatGain;  /* at 304 */
U32 PxfConf;  /* at 308 */
U32 DefaultColor;  /* at 312 */
} HQVDPLITE_IQI_Params_t;
#endif
#endif
