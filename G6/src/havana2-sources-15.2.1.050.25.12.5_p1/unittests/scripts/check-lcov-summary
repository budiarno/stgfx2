#!/usr/bin/env bash
#
# Outputs some summary information given a list of .info
# files as generated by geninfo
#
# See usage with -h or full help with --help option.
#

set -e

prog=`readlink -e $0`
base=`basename $prog .sh`

version() {
    echo "$base version $(git hash-object $prog)"
}

usage() {
    cat <<EOF
usage: $base [options] <info_files>...
       $base --help for full help
EOF
}

help() {
    local less=$(which less)
    [[ -n $less ]] || less=more
    cat <<EOF | $less
usage: $base [options] <gcov_files>...

Outputs summary information for the coverage
collected in the given .info files.

The .info files are generated for instance with
geninfo or lcov --capture.

The tool outputs summary information for
function lines and branch coverage.

The tool exits with a non 0 code if the --check
option is given and the line coverage is not 100%.

Note that the .info files are processed independently,
i.e. there is not atempt to merge the coverage information.

Available options:

  --check
        fails is some uncovered lines are present

  --quiet
        do not output summary information, actually useful
        with --check option only

  -h|--help
       output short usage (-h) or full help (--help)

  -v|--version
       output version information

Examples:

  # Ouput summary info for all .gcov files
  $ $base coverage.info
     TOTAL FUNCTIONS:       46
  EXECUTED FUNCTIONS:       30
         TOTAL LINES:      239
      EXECUTED LINES:      164
  FUNCTIONS COVERAGE:    65.21 %
      LINES COVERAGE:    68.61 %

  # Check whether 100% coverage is achieved
  $ $base --check --quiet coverage.info || echo "FAILED"
  FAILED

EOF
}

error() { echo "error: $1" >&2; exit 1; }
warning() { echo "warning: $1" >&2; }

# Main processing
declare args="$*"
declare -i check=0
declare -i quiet=0
declare files

while [[ $# -gt 0 ]]; do
    case $1 in
        --check) check=1;;
        --quiet) quiet=1;;
        -h) usage; exit 0;;
        --help) help; exit 0;;
        -v|--version) version; exit 0;;
        --) shift; break;;
        -*) error "unkown option: $1";;
        *) break;;
    esac
    shift || true
done

[[ $# -gt 0 ]] || error "missing input gcov files"

files="$*"

ls $files >/dev/null 2>&1 || error "input gcov files not found: $files"

fnf=$(cat $files | awk 'BEGIN{sum = 0}{if ($1 == "FNF") sum += $2;}END{print sum}' FS=:)
fnh=$(cat $files | awk 'BEGIN{sum = 0}{if ($1 == "FNH") sum += $2;}END{print sum}' FS=:)
lf=$(cat $files | awk 'BEGIN{sum = 0}{if ($1 == "LF") sum += $2;}END{print sum}' FS=:)
lh=$(cat $files | awk 'BEGIN{sum = 0}{if ($1 == "LH") sum += $2;}END{print sum}' FS=:)

fnc=0
[[ $fnf = 0 ]] || fnc=$(awk 'BEGIN{ print int('$fnh'/'$fnf' * 10000) / 100 }' </dev/null)
lc=0
[[ $lf = 0 ]] || lc=$(awk 'BEGIN{ print int('$lh'/'$lf' * 10000) / 100 }' </dev/null)

if [[ $quiet != 1 ]]; then
    printf "%20s: %8d\n" "TOTAL FUNCTIONS"    $fnf
    printf "%20s: %8d\n" "EXECUTED FUNCTIONS" $fnh
    printf "%20s: %8d\n" "TOTAL LINES"        $lf
    printf "%20s: %8d\n" "EXECUTED LINES"     $lh
    printf "%20s: %8.2f %%\n" "FUNCTIONS COVERAGE" $fnc
    printf "%20s: %8.2f %%\n" "LINES COVERAGE"     $lc
fi

if [[ $check = 1 ]]; then
    [[ $lf != $lh ]] && printf "FAILED: partial line coverage: %.2f%% < 100%%\n" $lc && exit 1
    echo "PASSED: full line coverage"
fi
exit 0

