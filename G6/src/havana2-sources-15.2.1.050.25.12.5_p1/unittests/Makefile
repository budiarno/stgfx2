# SYNOPSIS:
#
#   make -j4 TARGET           - makes the given TARGET for all unitary testsuites
#
#   make -j4 TARGET-UNITTESTS - makes the given TARGET for the given UNITTESTS
#
#   Where TARGET if one of:
#   make [all]            - makes everything suitable for check target
#   make full             - makes everything suitable for check-full target
#   make check            - runs minimal checks for development (alias for check-coverage)
#   make check-full       - runs full checks for production (alias for check-coverage check-unit)
#   make check-coverage   - runs unittests in coverage mode and check coverage
#   make check-unit       - runs unittests in production mode (optimized build)
#   make clean            - removes all files generated by make.
#   make coverage-summary - outputs coverage summary information or recompute it if not available
#   make coverage-genhtml - generates browsable coverage info in coverage/*/index.html
#   make coverage-display - displays coverage through BROWSER
#
#   Where UNITTESTS is one of:
#   os_unittests          - tests the osinline OS abstraction layetr
#   se_unittests          - tests the stream engine classes
#
#   The Following variables can be passed to the make command:
#   make V=1 ...          - enables verbose output
#   make XFLAGS=...       - passes these extra flags to both compilation of C and C++ files
#   make XCFLAGS=...      - passes these extra flags to compilation of C files
#   make XCXXFLAGS=...    - passes these extra flags to compilation of C++ files
#   make BROWSER=...      - sets the browser executable for coverage-display target (default: firefox)
#
# EXAMPLES:
#
#   # Minimal check of all unitests, for instance in pre-submit tests
#   $ make -j4 check
#
#   # Extensive check of all unitests, for instance in pre-release tests
#   $ make -j4 check-full
#
#   # Generate HTML coverage reports in coverage/coverage-UNITTESTS/index.html
#   $ make -j4 coverage-genhtml
#
#   # Display locally coverage information in browser
#   $ make BROWSER=chromium coverage-display -
#

# Points to the root of Google Test and some necessary components
# relative to where this file is.
KERNELSPACE_DIR = $(shell pwd)/../../../../../../../sources/linux/kernelspace/modules/st/
STREAMING_DIR = $(KERNELSPACE_DIR)/streaming_engine
DISPLAY_ENGINE = $(KERNELSPACE_DIR)/display_engine
INFRA_DIR = $(KERNELSPACE_DIR)/infrastructure

USERSPACE_DIR = $(shell pwd)/../../../../../../../sources/linux/userspace/components/st/
STREAMS_DIR   = $(shell pwd)/../../../../../../../sources/linux/userspace/components/st/tests/stream_gtests/streams
GMOCK_DIR = $(USERSPACE_DIR)/tests/stream_gmock
GTEST_DIR = $(GMOCK_DIR)/gtest

# Flags passed to the preprocessor.
CPPFLAGS += -DREPORT -DUNITTESTS \
	-DTEST_STREAMS_DIR=$(STREAMS_DIR) \
	-I$(GTEST_DIR)/include \
	-I$(GMOCK_DIR)/include \
	-Iinclude -Imocks\
	-I$(STREAMING_DIR)/player \
	-I$(STREAMING_DIR)/player/wrapper \
	-I$(STREAMING_DIR)/player/encoder \
	-I$(STREAMING_DIR)/player/encode_coordinator \
	-I$(STREAMING_DIR)/player/active_edge \
	-I$(STREAMING_DIR)/player/class_definitions \
	-I$(STREAMING_DIR)/player/es_processor \
	-I$(STREAMING_DIR)/player/include \
	-I$(STREAMING_DIR)/player/output_coordinator \
	-I$(STREAMING_DIR)/player/collator \
	-I$(STREAMING_DIR)/player/collator2 \
	-I$(STREAMING_DIR)/player/frame_parser \
	-I$(STREAMING_DIR)/player/manifestation_coordinator \
	-I$(STREAMING_DIR)/player/manifestor \
	-I$(STREAMING_DIR)/player/player \
	-I$(STREAMING_DIR)/player/player_stream \
	-I$(STREAMING_DIR)/player/player_playback \
	-I$(STREAMING_DIR)/player/standards \
	-I$(STREAMING_DIR)/player/infrastructure \
	-I$(STREAMING_DIR)/linux/drivers/allocator \
	-I$(STREAMING_DIR)/linux/drivers/strelay \
	-I$(STREAMING_DIR)/linux/drivers/player2 \
	-I$(STREAMING_DIR)/linux/drivers/osdev_abs \
	-I$(DISPLAY_ENGINE) \
	-I$(DISPLAY_ENGINE)/include \
	-I$(DISPLAY_ENGINE)/private/include \
	-I$(INFRA_DIR)/include \


# Flags passed to the compilation tools.
CXX=g++
CC=gcc
COMMONFLAGS ?= -g -O0 -Wall -m32
COMMONFLAGS += -Werror
CXXFLAGS += $(COMMONFLAGS) -std=c++0x
CXXFLAGS += -Wno-write-strings -Wno-sign-compare -Wno-conversion-null
CFLAGS += $(COMMONFLAGS)
GCOVFLAGS = -O0 --coverage
ARFLAGS=cr

# Extra user flags appended to default flags.
CXXFLAGS += $(XFLAGS) $(XCXXFLAGS)
CFLAGS += $(XFLAGS) $(XCFLAGS)

# Flags passed to the gtest based unit tests.
GTEST_RUN_FLAGS=--gtest_death_test_style=threadsafe --gmock_verbose=error

# Browser used by make coverage-display.
BROWSER=firefox

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = os_unittests se_unittests
TESTS_COV = $(TESTS:%=%.cov)

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# All Google Mock headers. Note that all Google Test headers are
# included here too, as they are #included by Google Mock headers.
# Usually you shouldn't change this definition.
GMOCK_HEADERS = $(GMOCK_DIR)/include/gmock/*.h \
                $(GMOCK_DIR)/include/gmock/internal/*.h \
                $(GTEST_HEADERS)

# User exposed targets.
.PHONY: all check full check-full clean all-unit check-unit all-coverage check-coverage coverage-summary coverage-genhtml coverage-display
.DEFAULT: all

# Targets definitions
all: all-coverage

.PHONY: $(addprefix all-, $(TESTS))
$(addprefix all-, $(TESTS)): all-%: all-coverage-%

check-cov: check-coverage
check: check-unit

.PHONY: $(addprefix check-, $(TESTS))
$(addprefix check-, $(TESTS)): check-%: check-coverage-%

full: all-coverage all-unit

.PHONY: $(addprefix full-, $(TESTS))
$(addprefix full-, $(TESTS)): full-%: all-coverage-% all-unit-%

# Run in order: coverage unittests, then optimized unittests.
check-full: full
	$(Q)$(MAKE) --no-print-directory check-coverage
	$(Q)$(MAKE) --no-print-directory check-unit

.PHONY: $(addprefix check-full-, $(TESTS))
$(addprefix check-full-, $(TESTS)): check-full-%: full-%
	$(Q)$(MAKE) --no-print-directory check-coverage-$*
	$(Q)$(MAKE) --no-print-directory check-unit-$*

clean:
	$(Q)rm -f $(TESTS) $(TESTS_COV) gtest.a gtest_main.a gmock.a gmock_main.a *.o *.gcda *.gcno *.d
	$(Q)rm -rf coverage results

all-unit: $(addprefix all-unit-, $(TESTS))

.PHONY: $(addprefix all-unit-, $(TESTS))
$(addprefix all-unit-, $(TESTS)): all-unit-%: %

# Check tests sequentially for better readability.
check-unit: all-unit
	$(Q)env MAKEFLAGS= $(MAKE) --no-print-directory $(addprefix check-unit-, $(TESTS))

.PHONY: $(addprefix check-unit-, $(TESTS))
$(addprefix check-unit-, $(TESTS)): check-unit-%: %
	$(Q)rm -f results/results-$*.xml
	$(Q)mkdir -p results
	./$* $(GTEST_RUN_FLAGS) --gtest_output=xml:results/results-$*.xml

all-coverage: $(addprefix all-coverage-, $(TESTS))

.PHONY: $(addprefix all-coverage-, $(TESTS))
$(addprefix all-coverage-, $(TESTS)): all-coverage-%: %.cov

# Check tests sequencially for better readability.
check-coverage:	all-coverage
	@env MAKEFLAGS= $(MAKE) --no-print-directory $(addprefix check-coverage-, $(TESTS))

# Force run by deleting .info such that check-coverage-* output tests results.
.PHONY: $(addprefix check-coverage-, $(TESTS))
$(addprefix check-coverage-, $(TESTS)): check-coverage-%: %.cov
	$(Q)rm -f coverage/coverage-$*.info
	$(Q)$(MAKE) --no-print-directory coverage-summary-$*

# Run sequencially for better readability of summary.
coverage-summary: all-coverage
	$(Q)env MAKEFLAGS= $(MAKE) --no-print-directory $(addprefix coverage-summary-, $(TESTS))

.PHONY: $(addprefix coverage-summary-, $(TESTS))
$(addprefix coverage-summary-, $(TESTS)): coverage-summary-%: coverage/coverage-%.info
	@echo "Raw Coverage for $*"
	$(Q)scripts/check-lcov-summary coverage/coverage-raw-$*.info
	@echo "Expected Coverage for $*"
	$(Q)scripts/check-lcov-summary $(CHECK_LCOV_FLAGS_$*) coverage/coverage-$*.info

coverage-genhtml: $(addprefix coverage-genhtml-, $(TESTS))

.PHONY: $(addprefix coverage-genhtml-, $(TESTS))
$(addprefix coverage-genhtml-, $(TESTS)): coverage-genhtml-%: coverage/coverage-%.info
	$(Q)rm -rf coverage/coverage-$* coverage/coverage-raw-$*
	$(Q)mkdir -p coverage/coverage-raw-$*
	$(Q)genhtml $(Q_Q) coverage/coverage-raw-$*.info --output-directory coverage/coverage-raw-$* --demangle-cpp
	$(Q)mkdir -p coverage/coverage-$*
	$(Q)genhtml $(Q_Q) coverage/coverage-$*.info --output-directory coverage/coverage-$* --demangle-cpp

coverage-display:
	$(BROWSER) coverage/*/index.html &

$(addsuffix .info, $(addprefix coverage/coverage-, $(TESTS))): coverage/coverage-%.info: %.cov
	$(Q)rm -f $*-*.gcda results/results-$*.cov.xml coverage/coverage-$*.info coverage/coverage-raw-$*.info
	$(Q)rm -rf coverage/coverage-$*.data coverage-$*.src
	$(Q)mkdir -p results
	./$*.cov $(GTEST_RUN_FLAGS) --gtest_output=xml:results/results-$*.cov.xml
	$(Q)mkdir -p coverage/coverage-$*.data
	$(Q)mkdir -p coverage/coverage-$*.src
	$(Q)scripts/generate-annotations $(Q_Q) --rekind find --src . --patterns analysis/annotations-patterns.txt -o coverage/coverage-$*.annotations
	$(Q)scripts/generate-annotated-for-lcov $(Q_Q) --src . --notes coverage/coverage-$*.annotations --dst coverage/coverage-$*.src --sources include --sources src
	$(Q)cp -r $*-*.gcno $*-*.gcda coverage/coverage-$*.data
	$(Q)lcov $(Q_Q) --capture -b  . -d coverage/coverage-$*.data --output-file coverage/coverage-raw-$*.info
	$(Q)lcov $(Q_Q) --capture -b  coverage/coverage-$*.src -d coverage/coverage-$*.data --output-file coverage/coverage-$*.info

############################################################################
#		Build GMock and Gtest Framework
############################################################################
# Builds gmock.a and gmock_main.a.  These libraries contain both
# Google Mock and Google Test.  A test should link with either gmock.a
# or gmock_main.a, depending on whether it defines its own main()
# function.  It's fine if your test only uses features from Google
# Test (and not Google Mock).

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)
GMOCK_SRCS_ = $(GMOCK_DIR)/src/*.cc $(GMOCK_HEADERS)

GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on implementation details of
# Google Mock and Google Test, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Mock and
# Google Test compile fast and for ordinary users their source rarely
# changes.
gtest-all.o : $(GTEST_SRCS_)
	$(Q)$(QUIET_CXX) $(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GTEST_DIR)/src/gtest-all.cc

gmock-all.o : $(GMOCK_SRCS_)
	$(Q)$(QUIET_CXX) $(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock-all.cc

gmock_main.o : $(GMOCK_SRCS_)
	$(Q)$(QUIET_CXX) $(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock_main.cc

gmock.a : gmock-all.o gtest-all.o
	$(Q)$(QUIET_AR) $(AR) $(ARFLAGS) $@ $^

gmock_main.a : gmock-all.o gtest-all.o gmock_main.o
	$(Q)$(QUIET_AR) $(AR) $(ARFLAGS) $@ $^


############################################################################
#		Build osinline objects to be tested
############################################################################
VPATH := $(VPATH):src
# We want coverage information for osinline.h, hence disable inlining
COVFLAGS_os_unittests = -DOSINLINE_NOINLINE
# We want strict coverage check for osinline.h
CHECK_LCOV_FLAGS_os_unittests ?= --check

CPPOBJECTS_os_unittests = $(addprefix os_unittests-, \
				osinline.o \
				)

############################################################################
#		Build osinline unitary tests
############################################################################
VPATH := $(VPATH):osinline
# Declare necessary wrapping functions for the tests
LDFLAGS_os_unittests = @src/wrap_posix.opts

UNITTESTS_OBJECTS_os_unittests = $(addprefix os_unittests-, \
				wrap_posix.o \
				osinline_timing.o \
				osinline_threads.o \
				osinline_mutexes.o \
				osinline_semaphores.o \
				osinline_events.o \
				osinline_barriers.o \
				osinline_alloc.o \
				osinline_tuneable.o \
				osinline_rwlocks.o \
				)

############################################################################
#		Build Streaming Engine
############################################################################
VPATH := $(VPATH):$(STREAMING_DIR)/player/output_coordinator
VPATH := $(VPATH):$(STREAMING_DIR)/player/infrastructure
VPATH := $(VPATH):$(STREAMING_DIR)/player/manifestor
VPATH := $(VPATH):$(STREAMING_DIR)/player/es_processor
VPATH := $(VPATH):$(STREAMING_DIR)/player/player_stream
VPATH := $(VPATH):$(STREAMING_DIR)/player/player_playback
VPATH := $(VPATH):$(STREAMING_DIR)/player/collator
VPATH := $(VPATH):$(STREAMING_DIR)/player/collator2
VPATH := $(VPATH):$(STREAMING_DIR)/player/frame_parser
VPATH := $(VPATH):$(STREAMING_DIR)/player/encode_coordinator
VPATH := $(VPATH):$(STREAMING_DIR)/player/wrapper
VPATH := $(VPATH):$(STREAMING_DIR)/player/player
VPATH := $(VPATH):$(STREAMING_DIR)/linux/drivers/player2
COVFLAGS_se_unittests =

CPPOBJECTS_se_unittests = $(addprefix se_unittests-, \
			timestamps.o ring_generic.o message.o \
			encode_coordinator.o encode_coordinator_stream.o encode_coordinator_buffer.o encode_coordinator_process.o output_coordinator_base.o \
			manifestor_video_stmfb.o manifestor_video.o manifestor_base.o \
			es_processor_base.o es_processor_state.o \
			collator_pes_audio_mpeg.o collator_pes_audio.o collator_pes.o collator_base.o collator_common.o \
			collator_pes_audio_wma.o frame_parser_audio_wma.o wma_properties.o \
			frame_parser_audio_mpeg.o frame_parser_audio.o frame_parser_base.o \
			collator2_base.o collator2_pes.o collator2_pes_video.o \
			collator2_pes_video_mpeg2.o stack_generic.o spanning_startcode.o \
                        player_tostring.o \
			)

COBJECTS_se_unittests = $(addprefix se_unittests-, \
			report.o fatal_error.o asf_guids.o player_threads.o \
			)

############################################################################
#		Build Unitary tests
############################################################################
VPATH := $(VPATH):src:output_coordinator:manifestor_stmfb:es_processor:collator:mocks:encode_coordinator
UNITTESTS_OBJECTS_se_unittests = $(addprefix se_unittests-, \
			osinline.o \
			report_environment.o \
			vibe_interface.o relay_interface.o \
			pcr_clock_recovery.o time_mapping.o \
			vsync_monitoring.o queue_buffer.o \
			es_processor_tests.o collator_ctest.o collator_pes_audio_mpeg_tests.o \
			mock_buffer.o mock_buffer_pool.o \
			mock_decode_buffer_manager.o \
			mock_manifestation_coordinator.o mock_player.o \
			mock_port.o mock_relay.o mock_ring.o mock_time.o \
			mock_vibe.o mock_collate_time_frame_parser.o mock_player_stream.o mock_playback.o\
			collator_pes_audio_wma_tests.o \
			collator2_pes_video_mpeg2_tests.o \
			mock_encoder.o mock_release_buffer_interface.o encode_coordinator_tests.o \
			)

############################################################################
#		Generic Build Rules.
#
# Not need to modify this generic part which depends upon:
# - TESTS : contains all basenames for the unitests
# For each test in TESTS the following variables are defined:
#  - UNITTESTS_OBJECTS_<test> : C++ objects that are part of the test driver
#  - CPPOBJECTS_<test> : C++ objects to be tested
#  - COBJECTS_<test> : C objects to be tested
#  - CPPFLAGS_<test> : test specific CPP flags
#  - CFLAGS_<test> : test specific C flags
#  - LDFLAGS_<test> : test specific link flags
#  - CXXFLAGS_<test> : test specific C++ flags
#  - COVFLAGS_<test> : test specific flags for coverage build
############################################################################

# Note: in the compile commands, we explicitly remove .gcno file before compilation as
#       a work around for a gcc bug http://gcc.gnu.org/bugzilla/show_bug.cgi?id=58602
#
COMPILE_CXX = $(Q)rm -f $(2:.o=.gcno) && $(QUIET_CXX) $(CXX) -MMD -MF $(2:.o=.d) $(CPPFLAGS) $(CXXFLAGS) $(CPPFLAGS_$1) $(CXXFLAGS_$1) $4 -c $3 -o $2 -pthread
COMPILE_CC  = $(Q)rm -f $(2:.o=.gcno) && $(QUIET_CC)  $(CC)  -MMD -MF $(2:.o=.d) $(CPPFLAGS) $(CFLAGS)   $(CPPFLAGS_$1) $(CFLAGS_$1)   $4 -c $3 -o $2 -pthread
LINK_CXX    = $(Q)$(QUIET_LD)  $(CXX) $(CPPFLAGS) $(CXXFLAGS) $(CPPFLAGS_$1) $(CXXFLAGS_$1) $(LDFLAGS) $(LDFLAGS_$1) $4 $3 -o $2 -pthread -lrt

define BUILD_TEST
TEST_$1 = $1
OBJECTS_$1 = $$(UNITTESTS_OBJECTS_$1) $$(CPPOBJECTS_$1) $$(COBJECTS_$1)
-include $$(OBJECTS_$1:.o=.d)
$$(UNITTESTS_OBJECTS_$(1)) $$(CPPOBJECTS_$(1)): $1-%.o :%.cpp
	$$(call COMPILE_CXX,$1,$$@,$$<)

$$(COBJECTS_$1): $1-%.o :%.c
	$$(call COMPILE_CC,$1,$$@,$$<)

$$(TEST_$1): $$(OBJECTS_$1) gmock_main.a
	$$(call LINK_CXX,$1,$$@,$$^)

endef

define BUILD_TEST_COV
TEST_COV_$1 = $1.cov
UNITTESTS_OBJECTS_COV_$1 = $$(UNITTESTS_OBJECTS_$1:.o=.cov.o)
CPPOBJECTS_COV_$1 = $$(CPPOBJECTS_$1:.o=.cov.o)
COBJECTS_COV_$1 = $$(COBJECTS_$1:.o=.cov.o)
OBJECTS_COV_$1 = $$(UNITTESTS_OBJECTS_COV_$1) $$(CPPOBJECTS_COV_$1) $$(COBJECTS_COV_$1)
-include $$(OBJECTS_COV_$1:.o=.d)
$$(UNITTESTS_OBJECTS_COV_$(1)): $1-%.cov.o :%.cpp
	$$(call COMPILE_CXX,$1,$$@,$$<,$$(COVFLAGS_$1))

$$(CPPOBJECTS_COV_$1): $1-%.cov.o :%.cpp
	$$(call COMPILE_CXX,$1,$$@,$$<,$$(COVFLAGS_$1) $$(GCOVFLAGS))

$$(COBJECTS_COV_$1): $1-%.cov.o :%.c
	$$(call COMPILE_CC,$1,$$@,$$<,$$(COVFLAGS_$1) $$(GCOVFLAGS))

$$(TEST_COV_$1): $$(OBJECTS_COV_$1) gmock_main.a
	$$(call LINK_CXX,$1,$$@,$$^,$$(COVFLAGS_$1) $$(GCOVFLAGS))
endef

$(foreach test,$(TESTS),$(eval $(call BUILD_TEST,$(test))))
$(foreach test,$(TESTS),$(eval $(call BUILD_TEST_COV,$(test))))

QUIET_CMD=scripts/quiet
ifeq ($(V),)
QUIET_CC=env QUIET="  CC  $@" $(QUIET_CMD)
QUIET_CXX=env QUIET="  CXX $@" $(QUIET_CMD)
QUIET_LD=env QUIET="  LD  $@" $(QUIET_CMD)
QUIET_AR=env QUIET="  AR  $@" $(QUIET_CMD)
Q_Q=-q
Q=@
else
QUIET_CC=
QUIET_CXX=
QUIET_LD=
QUIET_AR=
Q_Q=
Q=
endif
